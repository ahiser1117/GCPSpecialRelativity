// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel RenderGraph

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> _Result;
RWStructuredBuffer<uint2> _Objects;
RWStructuredBuffer<float4> _ObjColors;
RWStructuredBuffer<float3> _Events;

uint _Width;
uint _Height;
uint _NumObjects;
int _Thickness;
int _xOffset;
int _yOffset;
int _IntervalIdx;
float _CurrentTime;

float4 _BackgroundColor;
float4 _MinorGridColor;
float4 _MajorGridColor;
float4 _InvalidWorldLine;
float4 _HighlightColor;
float4 _TimeLineColor;
float4 _GridDivideColor;

void ClearGraph(uint3 id){
    _Result[id.xy] = _BackgroundColor;
}

void BaseGraph(uint3 id){
    int xPos = id.x - _Width/2 - _xOffset;
    int yPos = id.y - _Height/2 - _yOffset;

    

    // Lighter grid aligned with Y-Axis
    if((xPos > 0 && xPos % 25 < _Thickness ||
        (xPos < 0 && -xPos % 25 < _Thickness))){
        _Result[id.xy] = _MinorGridColor;
    }

    // Lighter grid aligned with X-Axis
    if((yPos > 0 && yPos % 25 < _Thickness) ||
        (yPos < 0 && -yPos % 25 < _Thickness)){
        _Result[id.xy] = _MinorGridColor;
    }

    if(yPos - _CurrentTime < _Thickness && yPos - _CurrentTime > -_Thickness){
        _Result[id.xy] = _TimeLineColor;
    }

    // X and Y Axies
    if((xPos > -_Thickness && xPos < _Thickness) || 
    (yPos > -_Thickness && yPos < _Thickness)){
        _Result[id.xy] = _MajorGridColor;
    }

    // X-Axis tick marks
    if((xPos > 0 && (yPos > -10 && yPos < 10) && (xPos) % 100 < _Thickness) ||
        (xPos < 0 && (yPos > -10 && yPos < 10) && (-xPos) % 100 < _Thickness)){
        _Result[id.xy] = _MajorGridColor;
    }

    // Y-Axis tick marks
    if((yPos > 0 && (xPos > -10 && xPos < 10) && (yPos) % 100 < _Thickness) ||
        (yPos < 0 && (xPos > -10 && xPos < 10) && (-yPos) % 100 < _Thickness)){
        _Result[id.xy] = _MajorGridColor;
    }
}

void DrawEvents(uint3 id){
    int xPos = id.x - _Width/2 - _xOffset;
    int yPos = id.y - _Height/2 - _yOffset;



    for(uint j = 0; j < _NumObjects; j++){
        for(uint i = _Objects[j].x; i < _Objects[j].y; i++){

            float2 vec1 = float2(_Events[i+1].x-_Events[i].x, _Events[i+1].y-_Events[i].y);
            float2 vec2 = float2(xPos-_Events[i].x, yPos-_Events[i].y);

            float beta = (vec1.x / vec1.y);

            float cross = abs(vec1.x * vec2.y - vec1.y * vec2.x);
            float dot = vec1.x * vec2.x + vec1.y * vec2.y;
            float gamma = 1 / (25* sqrt(1 - pow(beta,2)));

            float vec1Mag = sqrt(vec1.x * vec1.x + vec1.y * vec1.y);
            float S = gamma * (vec1.y - beta * vec1.x);

            float dotOverVec1 = dot / vec1Mag;
            float Vec1OverS = vec1Mag / S;

            if(i == _IntervalIdx && 0 < (dotOverVec1 / vec1Mag) && (dotOverVec1 / vec1Mag) < 1){
                if((cross / vec1Mag < 3 * _Thickness) || (abs(beta) < 1 && cross / vec1Mag < 12 && (dotOverVec1) % Vec1OverS < 2 * _Thickness + 2 && (dotOverVec1) % Vec1OverS > - 2 * _Thickness - 2)){
                        _Result[id.xy] = _HighlightColor;
                }
            }

            if(0 < (dotOverVec1 / vec1Mag) && (dotOverVec1 / vec1Mag) < 1){
                if((cross / vec1Mag < 2 * _Thickness) || (abs(beta) < 1 && cross / vec1Mag < 10 && (dotOverVec1) % Vec1OverS < 2 * _Thickness && (dotOverVec1) % Vec1OverS > - 2 * _Thickness)){
                    if(abs(beta) > 1){
                        _Result[id.xy] = _InvalidWorldLine;
                    } else{
                        _Result[id.xy] = _ObjColors[j];
                    }
                }
            }
        }
    }
}

void DrawBetaGraph(uint3 id){
    int xPos = id.x - _Width/2 - _xOffset;
    int yPos = id.y - 120;

    if((xPos > 0 && xPos % 25 < _Thickness ||
        (xPos < 0 && -xPos % 25 < _Thickness))){
        _Result[id.xy] = _MinorGridColor;
    }

    // Lighter grid aligned with X-Axis
    if((yPos > 0 && yPos % 30 < _Thickness) ||
        (yPos < 0 && -yPos % 30 < _Thickness)){
        _Result[id.xy] = _MinorGridColor;
    }

    // X and Y Axies
    if((xPos > -_Thickness && xPos < _Thickness) || 
    (yPos > -_Thickness && yPos < _Thickness)){
        _Result[id.xy] = _MajorGridColor;
    }

    // X-Axis tick marks
    if((xPos > 0 && (yPos > -10 && yPos < 10) && (xPos) % 100 < _Thickness) ||
        (xPos < 0 && (yPos > -10 && yPos < 10) && (-xPos) % 100 < _Thickness)){
        _Result[id.xy] = _MajorGridColor;
    }

    // Y-Axis tick marks
    if((yPos > 0 && (xPos > -10 && xPos < 10) && (yPos) % 60 < _Thickness) ||
        (yPos < 0 && (xPos > -10 && xPos < 10) && (-yPos) % 60 < _Thickness)){
        _Result[id.xy] = _MajorGridColor;
    }

    if(yPos > 120){
        _Result[id.xy] = _GridDivideColor;
    }

}



[numthreads(8,8,1)]
void RenderGraph (uint3 id : SV_DispatchThreadID)
{
    if(id.x < _Width && id.y < _Height){
        ClearGraph(id);
        if(id.y < 250){
            DrawBetaGraph(id);
        } else{
            BaseGraph(id);
            DrawEvents(id);
        }   
    }
    

}
